
name: main_pull_request

on:
  # This workflow is automatically triggered upon the approval of a pull request,
  # with a condition checking for changes in the source files or the pom.xml file in the development branch.
  pull_request:
    types:
      - closed
      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
  
jobs:
  code_merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR was merged
  branch_synch:
    if: github.ref == 'refs/heads/dev'  # execution when code merge: main -> dev
    needs: code_merge
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR was branch synchronization code merged from main -> dev. No further step.
  main_build:
    if: github.ref == 'refs/heads/main'  # execution when code merge: dev -> main
    needs: code_merge
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [21.x]     
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: CI=true npm test
  code_scan:
    if: github.ref == 'refs/heads/main'  # execution when code merge: dev -> main
    needs: main_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  
      - name: Analyze on SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
  prd_deploy:
    if: github.ref == 'refs/heads/main'  # execution when code merge: dev -> main
    needs: code_scan
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with: 
          ref: dev
      - name: Use Node.js 21.x   
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      #- run: ls -R build
      #- name: Deploy to Github Pages
      #  uses: JamesIves/github-pages-deploy-action@v4
      #  with:
      #    token: ${{ secrets.GH_TOKEN }}
      #    branch: gh-pages
      #    folder: build 
      - name: List Contents of build Directory
        run: ls -R build
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  build_docker_image:
    needs: test_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: dev
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/task-tracker:latest .
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: docker push  ${{ secrets.DOCKER_HUB_USERNAME }}/task-tracker:latest

  deploy_to_digitalocean:
    needs: build_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean
        env:
          DIGITALOCEAN_SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          CONTAINER_NAME: "task-tracker" # Change this to your container name
        run: |
          mkdir -p ~/.ssh
          echo "$DIGITALOCEAN_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa 165.22.100.234 >> ~/.ssh/known_hosts
          
          # Stop the container if it is running
          ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker stop $CONTAINER_NAME || true"
          
          # Remove the container if it exists
          ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker rm -f $CONTAINER_NAME || true"
          
          # Pull the latest image from Docker Hub
          docker pull $DOCKER_HUB_USERNAME/task-tracker:latest 
          
          # Run the container
          ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker run -d --name $CONTAINER_NAME -p 3000:3000 $DOCKER_HUB_USERNAME/task-tracker:latest"


          
